float wii_fminf(float x, float y)
{
    return min(x, y);
}

float wii_fmaxf(float x, float y)
{
    return max(x, y);
}

const uint64_t frsqrte_bases[32] = 
{
    0x3ffa000, 0x3c29000, 0x38aa000, 0x3572000, 0x3279000, 0x2fb7000, 0x2d26000, 0x2ac0000,
    0x2881000, 0x2665000, 0x2468000, 0x2287000, 0x20c1000, 0x1f12000, 0x1d79000, 0x1bf4000,
    0x1a7e800, 0x17cb800, 0x1552800, 0x130c000, 0x10f2000, 0x0eff000, 0x0d2e000, 0x0b7c000,
    0x09e5000, 0x0867000, 0x06ff000, 0x05ab800, 0x046a000, 0x0339800, 0x0218800, 0x0105800,
};

const uint64_t frsqrte_decs[32] =
{
    0x7a4, 0x700, 0x670, 0x5f2, 0x584, 0x524, 0x4cc, 0x47e, 0x43a, 0x3fa, 0x3c2, 0x38e, 0x35e,
    0x332, 0x30a, 0x2e6, 0x568, 0x4f3, 0x48d, 0x435, 0x3e7, 0x3a2, 0x365, 0x32e, 0x2fc, 0x2d0,
    0x2a8, 0x283, 0x261, 0x243, 0x226, 0x20b,
};

const float trig_table[256][4] =
{
   {0.000000f, 1.000000f, 0.024541f, -0.000301f},
   {0.024541f, 0.999699f, 0.024526f, -0.000903f},
   {0.049068f, 0.998795f, 0.024497f, -0.001505f},
   {0.073565f, 0.99729f, 0.024453f,  -0.002106f},
   {0.098017f, 0.995185f, 0.024394f, -0.002705f},
   {0.122411f, 0.99248f, 0.02432f,  -0.003303f},
   {0.14673f,  0.989177f, 0.024231f, -0.003899f},
   {0.170962f, 0.985278f, 0.024128f, -0.004492f},
   {0.19509f,  0.980785f, 0.024011f, -0.005083f},
   {0.219101f, 0.975702f, 0.023879f, -0.005671f},
   {0.24298f,  0.970031f, 0.023733f, -0.006255f},
   {0.266713f, 0.963776f, 0.023572f, -0.006836f},
   {0.290285f, 0.95694f, 0.023397f, -0.007412f},
   {0.313682f, 0.949528f, 0.023208f, -0.007984f},
   {0.33689f,  0.941544f, 0.023005f, -0.008551f},
   {0.359895f, 0.932993f, 0.022788f, -0.009113f},
   {0.382683f, 0.92388f, 0.022558f, -0.00967f},
   {0.405241f, 0.91421f, 0.022314f, -0.01022f},
   {0.427555f, 0.903989f, 0.022056f, -0.010765f},
   {0.449611f, 0.893224f, 0.021785f, -0.011303f},
   {0.471397f, 0.881921f, 0.021501f, -0.011834f},
   {0.492898f, 0.870087f, 0.021205f, -0.012358f},
   {0.514103f, 0.857729f, 0.020895f, -0.012875f},
   {0.534998f, 0.844854f, 0.020573f, -0.013384f},
   {0.55557f,  0.83147f, 0.020238f, -0.013885f},
   {0.575808f, 0.817585f, 0.019891f, -0.014377f},
   {0.595699f, 0.803208f, 0.019532f, -0.014861f},
   {0.615232f, 0.788346f, 0.019162f, -0.015336f},
   {0.634393f, 0.77301f, 0.01878f, -0.015802f},
   {0.653173f, 0.757209f, 0.018386f, -0.016258f},
   {0.671559f, 0.740951f, 0.017982f, -0.016704f},
   {0.689541f, 0.724247f, 0.017566f, -0.01714f},
   {0.707107f, 0.707107f, 0.01714f, -0.017566f},
   {0.724247f, 0.689541f, 0.016704f, -0.017982f},
   {0.740951f, 0.671559f, 0.016258f, -0.018386f},
   {0.757209f, 0.653173f, 0.015802f, -0.01878f},
   {0.77301f,  0.634393f, 0.015336f, -0.019162f},
   {0.788346f, 0.615232f, 0.014861f, -0.019532f},
   {0.803208f, 0.595699f, 0.014377f, -0.019891f},
   {0.817585f, 0.575808f, 0.013885f, -0.020238f},
   {0.83147f,  0.55557f, 0.013384f, -0.020573f},
   {0.844854f, 0.534998f, 0.012875f, -0.020895f},
   {0.857729f, 0.514103f, 0.012358f, -0.021205f},
   {0.870087f, 0.492898f, 0.011834f, -0.021501f},
   {0.881921f, 0.471397f, 0.011303f, -0.021785f},
   {0.893224f, 0.449611f, 0.010765f, -0.022056f},
   {0.903989f, 0.427555f, 0.01022f, -0.022314f},
   {0.91421f,  0.405241f, 0.00967f, -0.022558f},
   {0.92388f,  0.382683f, 0.009113f, -0.022788f},
   {0.932993f, 0.359895f, 0.008551f, -0.023005f},
   {0.941544f, 0.33689f, 0.007984f, -0.023208f},
   {0.949528f, 0.313682f, 0.007412f, -0.023397f},
   {0.95694f,  0.290285f, 0.006836f, -0.023572f},
   {0.963776f, 0.266713f, 0.006255f, -0.023733f},
   {0.970031f, 0.24298f, 0.005671f, -0.023879f},
   {0.975702f, 0.219101f, 0.005083f, -0.024011f},
   {0.980785f, 0.19509f, 0.004492f, -0.024128f},
   {0.985278f, 0.170962f, 0.003899f, -0.024231f},
   {0.989177f, 0.14673f, 0.003303f, -0.02432f},
   {0.99248f,  0.122411f, 0.002705f, -0.024394f},
   {0.995185f, 0.098017f, 0.002106f, -0.024453f},
   {0.99729f,  0.073565f, 0.001505f, -0.024497f},
   {0.998795f, 0.049068f, 0.000903f, -0.024526f},
   {0.999699f, 0.024541f, 0.000301f, -0.024541f},
   {1.0f,      0.0f, -0.000301f, -0.024541f},
   {0.999699f, -0.024541f, -0.000903f, -0.024526f},
   {0.998795f, -0.049068f, -0.001505f, -0.024497f},
   {0.99729f,  -0.073565f, -0.002106f, -0.024453f},
   {0.995185f, -0.098017f, -0.002705f, -0.024394f},
   {0.99248f,  -0.122411f, -0.003303f, -0.02432f},
   {0.989177f, -0.14673f, -0.003899f, -0.024231f},
   {0.985278f, -0.170962f, -0.004492f, -0.024128f},
   {0.980785f, -0.19509f, -0.005083f, -0.024011f},
   {0.975702f, -0.219101f, -0.005671f, -0.023879f},
   {0.970031f, -0.24298f, -0.006255f, -0.023733f},
   {0.963776f, -0.266713f, -0.006836f, -0.023572f},
   {0.95694f,  -0.290285f, -0.007412f, -0.023397f},
   {0.949528f, -0.313682f, -0.007984f, -0.023208f},
   {0.941544f, -0.33689f, -0.008551f, -0.023005f},
   {0.932993f, -0.359895f, -0.009113f, -0.022788f},
   {0.92388f,  -0.382683f, -0.00967f, -0.022558f},
   {0.91421f,  -0.405241f, -0.01022f, -0.022314f},
   {0.903989f, -0.427555f, -0.010765f, -0.022056f},
   {0.893224f, -0.449611f, -0.011303f, -0.021785f},
   {0.881921f, -0.471397f, -0.011834f, -0.021501f},
   {0.870087f, -0.492898f, -0.012358f, -0.021205f},
   {0.857729f, -0.514103f, -0.012875f, -0.020895f},
   {0.844854f, -0.534998f, -0.013384f, -0.020573f},
   {0.83147f,  -0.55557f, -0.013885f, -0.020238f},
   {0.817585f, -0.575808f, -0.014377f, -0.019891f},
   {0.803208f, -0.595699f, -0.014861f, -0.019532f},
   {0.788346f, -0.615232f, -0.015336f, -0.019162f},
   {0.77301f,  -0.634393f, -0.015802f, -0.01878f},
   {0.757209f, -0.653173f, -0.016258f, -0.018386f},
   {0.740951f, -0.671559f, -0.016704f, -0.017982f},
   {0.724247f, -0.689541f, -0.01714f, -0.017566f},
   {0.707107f, -0.707107f, -0.017566f, -0.01714f},
   {0.689541f, -0.724247f, -0.017982f, -0.016704f},
   {0.671559f, -0.740951f, -0.018386f, -0.016258f},
   {0.653173f, -0.757209f, -0.01878f, -0.015802f},
   {0.634393f, -0.77301f, -0.019162f, -0.015336f},
   {0.615232f, -0.788346f, -0.019532f, -0.014861f},
   {0.595699f, -0.803208f, -0.019891f, -0.014377f},
   {0.575808f, -0.817585f, -0.020238f, -0.013885f},
   {0.55557f,  -0.83147f, -0.020573f, -0.013384f},
   {0.534998f, -0.844854f, -0.020895f, -0.012875f},
   {0.514103f, -0.857729f, -0.021205f, -0.012358f},
   {0.492898f, -0.870087f, -0.021501f, -0.011834f},
   {0.471397f, -0.881921f, -0.021785f, -0.011303f},
   {0.449611f, -0.893224f, -0.022056f, -0.010765f},
   {0.427555f, -0.903989f, -0.022314f, -0.01022f},
   {0.405241f, -0.91421f, -0.022558f, -0.00967f},
   {0.382683f, -0.92388f, -0.022788f, -0.009113f},
   {0.359895f, -0.932993f, -0.023005f, -0.008551f},
   {0.33689f,  -0.941544f, -0.023208f, -0.007984f},
   {0.313682f, -0.949528f, -0.023397f, -0.007412f},
   {0.290285f, -0.95694f, -0.023572f, -0.006836f},
   {0.266713f, -0.963776f, -0.023733f, -0.006255f},
   {0.24298f,  -0.970031f, -0.023879f, -0.005671f},
   {0.219101f, -0.975702f, -0.024011f, -0.005083f},
   {0.19509f,  -0.980785f, -0.024128f, -0.004492f},
   {0.170962f, -0.985278f, -0.024231f, -0.003899f},
   {0.14673f,  -0.989177f, -0.02432f, -0.003303f},
   {0.122411f, -0.99248f, -0.024394f, -0.002705f},
   {0.098017f, -0.995185f, -0.024453f, -0.002106f},
   {0.073565f, -0.99729f, -0.024497f, -0.001505f},
   {0.049068f, -0.998795f, -0.024526f, -0.000903f},
   {0.024541f, -0.999699f, -0.024541f, -0.000301f},
   {0.0f, -1.0f, -0.024541f, 0.000301f},
   {-0.024541f, -0.999699f, -0.024526f, 0.000903f},
   {-0.049068f, -0.998795f, -0.024497f, 0.001505f},
   {-0.073565f, -0.99729f, -0.024453f, 0.002106f},
   {-0.098017f, -0.995185f, -0.024394f, 0.002705f},
   {-0.122411f, -0.99248f, -0.02432f, 0.003303f},
   {-0.14673f,  -0.989177f, -0.024231f, 0.003899f},
   {-0.170962f, -0.985278f, -0.024128f, 0.004492f},
   {-0.19509f,  -0.980785f, -0.024011f, 0.005083f},
   {-0.219101f, -0.975702f, -0.023879f, 0.005671f},
   {-0.24298f,  -0.970031f, -0.023733f, 0.006255f},
   {-0.266713f, -0.963776f, -0.023572f, 0.006836f},
   {-0.290285f, -0.95694f, -0.023397f, 0.007412f},
   {-0.313682f, -0.949528f, -0.023208f, 0.007984f},
   {-0.33689f,  -0.941544f, -0.023005f, 0.008551f},
   {-0.359895f, -0.932993f, -0.022788f, 0.009113f},
   {-0.382683f, -0.92388f, -0.022558f, 0.00967f},
   {-0.405241f, -0.91421f, -0.022314f, 0.01022f},
   {-0.427555f, -0.903989f, -0.022056f, 0.010765f},
   {-0.449611f, -0.893224f, -0.021785f, 0.011303f},
   {-0.471397f, -0.881921f, -0.021501f, 0.011834f},
   {-0.492898f, -0.870087f, -0.021205f, 0.012358f},
   {-0.514103f, -0.857729f, -0.020895f, 0.012875f},
   {-0.534998f, -0.844854f, -0.020573f, 0.013384f},
   {-0.55557f, -0.83147f, -0.020238f, 0.013885f},
   {-0.575808f, -0.817585f, -0.019891f, 0.014377f},
   {-0.595699f, -0.803208f, -0.019532f, 0.014861f},
   {-0.615232f, -0.788346f, -0.019162f, 0.015336f},
   {-0.634393f, -0.77301f, -0.01878f, 0.015802f},
   {-0.653173f, -0.757209f, -0.018386f, 0.016258f},
   {-0.671559f, -0.740951f, -0.017982f, 0.016704f},
   {-0.689541f, -0.724247f, -0.017566f, 0.01714f},
   {-0.707107f, -0.707107f, -0.01714f, 0.017566f},
   {-0.724247f, -0.689541f, -0.016704f, 0.017982f},
   {-0.740951f, -0.671559f, -0.016258f, 0.018386f},
   {-0.757209f, -0.653173f, -0.015802f, 0.01878f},
   {-0.77301f, -0.634393f, -0.015336f, 0.019162f},
   {-0.788346f, -0.615232f, -0.014861f, 0.019532f},
   {-0.803208f, -0.595699f, -0.014377f, 0.019891f},
   {-0.817585f, -0.575808f, -0.013885f, 0.020238f},
   {-0.83147f, -0.55557f, -0.013384f, 0.020573f},
   {-0.844854f, -0.534998f, -0.012875f, 0.020895f},
   {-0.857729f, -0.514103f, -0.012358f, 0.021205f},
   {-0.870087f, -0.492898f, -0.011834f, 0.021501f},
   {-0.881921f, -0.471397f, -0.011303f, 0.021785f},
   {-0.893224f, -0.449611f, -0.010765f, 0.022056f},
   {-0.903989f, -0.427555f, -0.01022f, 0.022314f},
   {-0.91421f, -0.405241f, -0.00967f, 0.022558f},
   {-0.92388f, -0.382683f, -0.009113f, 0.022788f},
   {-0.932993f, -0.359895f, -0.008551f, 0.023005f},
   {-0.941544f, -0.33689f, -0.007984f, 0.023208f},
   {-0.949528f, -0.313682f, -0.007412f, 0.023397f},
   {-0.95694f, -0.290285f, -0.006836f, 0.023572f},
   {-0.963776f, -0.266713f, -0.006255f, 0.023733f},
   {-0.970031f, -0.24298f, -0.005671f, 0.023879f},
   {-0.975702f, -0.219101f, -0.005083f, 0.024011f},
   {-0.980785f, -0.19509f, -0.004492f, 0.024128f},
   {-0.985278f, -0.170962f, -0.003899f, 0.024231f},
   {-0.989177f, -0.14673f, -0.003303f, 0.02432f},
   {-0.99248f, -0.122411f, -0.002705f, 0.024394f},
   {-0.995185f, -0.098017f, -0.002106f, 0.024453f},
   {-0.99729f, -0.073565f, -0.001505f, 0.024497f},
   {-0.998795f, -0.049068f, -0.000903f, 0.024526f},
   {-0.999699f, -0.024541f, -0.000301f, 0.024541f},
   {-1.0f, -0.0f, 0.000301f, 0.024541f},
   {-0.999699f, 0.024541f, 0.000903f, 0.024526f},
   {-0.998795f, 0.049068f, 0.001505f, 0.024497f},
   {-0.99729f, 0.073565f, 0.002106f, 0.024453f},
   {-0.995185f, 0.098017f, 0.002705f, 0.024394f},
   {-0.99248f, 0.122411f, 0.003303f, 0.02432f},
   {-0.989177f, 0.14673f, 0.003899f, 0.024231f},
   {-0.985278f, 0.170962f, 0.004492f, 0.024128f},
   {-0.980785f, 0.19509f, 0.005083f, 0.024011f},
   {-0.975702f, 0.219101f, 0.005671f, 0.023879f},
   {-0.970031f, 0.24298f, 0.006255f, 0.023733f},
   {-0.963776f, 0.266713f, 0.006836f, 0.023572f},
   {-0.95694f, 0.290285f, 0.007412f, 0.023397f},
   {-0.949528f, 0.313682f, 0.007984f, 0.023208f},
   {-0.941544f, 0.33689f, 0.008551f, 0.023005f},
   {-0.932993f, 0.359895f, 0.009113f, 0.022788f},
   {-0.92388f, 0.382683f, 0.00967f, 0.022558f},
   {-0.91421f, 0.405241f, 0.01022f, 0.022314f},
   {-0.903989f, 0.427555f, 0.010765f, 0.022056f},
   {-0.893224f, 0.449611f, 0.011303f, 0.021785f},
   {-0.881921f, 0.471397f, 0.011834f, 0.021501f},
   {-0.870087f, 0.492898f, 0.012358f, 0.021205f},
   {-0.857729f, 0.514103f, 0.012875f, 0.020895f},
   {-0.844854f, 0.534998f, 0.013384f, 0.020573f},
   {-0.83147f, 0.55557f, 0.013885f, 0.020238f},
   {-0.817585f, 0.575808f, 0.014377f, 0.019891f},
   {-0.803208f, 0.595699f, 0.014861f, 0.019532f},
   {-0.788346f, 0.615232f, 0.015336f, 0.019162f},
   {-0.77301f, 0.634393f, 0.015802f, 0.01878f},
   {-0.757209f, 0.653173f, 0.016258f, 0.018386f},
   {-0.740951f, 0.671559f, 0.016704f, 0.017982f},
   {-0.724247f, 0.689541f, 0.01714f, 0.017566f},
   {-0.707107f, 0.707107f, 0.017566f, 0.01714f},
   {-0.689541f, 0.724247f, 0.017982f, 0.016704f},
   {-0.671559f, 0.740951f, 0.018386f, 0.016258f},
   {-0.653173f, 0.757209f, 0.01878f, 0.015802f},
   {-0.634393f, 0.77301f, 0.019162f, 0.015336f},
   {-0.615232f, 0.788346f, 0.019532f, 0.014861f},
   {-0.595699f, 0.803208f, 0.019891f, 0.014377f},
   {-0.575808f, 0.817585f, 0.020238f, 0.013885f},
   {-0.55557f, 0.83147f, 0.020573f, 0.013384f},
   {-0.534998f, 0.844854f, 0.020895f, 0.012875f},
   {-0.514103f, 0.857729f, 0.021205f, 0.012358f},
   {-0.492898f, 0.870087f, 0.021501f, 0.011834f},
   {-0.471397f, 0.881921f, 0.021785f, 0.011303f},
   {-0.449611f, 0.893224f, 0.022056f, 0.010765f},
   {-0.427555f, 0.903989f, 0.022314f, 0.01022f},
   {-0.405241f, 0.91421f, 0.022558f, 0.00967f},
   {-0.382683f, 0.92388f, 0.022788f, 0.009113f},
   {-0.359895f, 0.932993f, 0.023005f, 0.008551f},
   {-0.33689f, 0.941544f, 0.023208f, 0.007984f},
   {-0.313682f, 0.949528f, 0.023397f, 0.007412f},
   {-0.290285f, 0.95694f, 0.023572f, 0.006836f},
   {-0.266713f, 0.963776f, 0.023733f, 0.006255f},
   {-0.24298f, 0.970031f, 0.023879f, 0.005671f},
   {-0.219101f, 0.975702f, 0.024011f, 0.005083f},
   {-0.19509f, 0.980785f, 0.024128f, 0.004492f},
   {-0.170962f, 0.985278f, 0.024231f, 0.003899f},
   {-0.14673f, 0.989177f, 0.02432f, 0.003303f},
   {-0.122411f, 0.99248f, 0.024394f, 0.002705f},
   {-0.098017f, 0.995185f, 0.024453f, 0.002106f},
   {-0.073565f, 0.99729f, 0.024497f, 0.001505f},
   {-0.049068f, 0.998795f, 0.024526f, 0.000903f},
   {-0.024541f, 0.999699f, 0.024541f, 0.000301f},
};

const float atan2_bases[32] =
{
    0.0f,       1.2728254f, 2.5431712f, 3.8085866f,  5.0666785f, 6.3151355f, 7.551755f,  8.774462f,  
    9.981329f,  11.170587f, 12.34064f,  13.4900675f, 14.617632f, 15.722275f, 16.803114f, 17.859438f, 
    18.890703f, 19.896515f, 20.876625f, 21.830914f,  22.759384f, 23.662142f, 24.539394f, 25.391424f, 
    26.218594f, 27.02132f,  27.800077f, 28.555378f,  29.28777f,  29.997826f, 30.686144f, 31.353329f,
};

const float atan2_incs[32] =
{
    1.2728254f, 1.2703458f,  1.2654155f, 1.2580916f, 1.2484571f,  1.2366195f,  1.2227072f,  1.2068666f,
    1.1892582f, 1.1700529f,  1.149428f,  1.1275644f, 1.1046423f,  1.0808387f,  1.0563251f,  1.0312649f,
    1.005812f,  0.98010963f, 0.9542891f, 0.9284698f, 0.90275896f, 0.87725157f, 0.8520309f,  0.8271689f,
    0.802727f,  0.77875656f, 0.7553001f, 0.7323915f, 0.7100574f,  0.6883175f,  0.66718566f, 0.6466705f,
};

double ppc_frsqrte(double val)
{
    double_bits_t f = { .val = val };

    const uint64_t mantissa_mask  = 1ULL    << 52ULL;
    const uint64_t sign_mask      = 1ULL    << 63ULL;
    const uint64_t exponent_mask  = 0x7FFLL << 52ULL;
    const uint64_t denormal_mask  = 1ULL    << 52ULL;

    uint64_t mantissa = f.bits & (mantissa_mask - 1ULL);
    uint64_t sign     = f.bits & sign_mask;
    uint64_t exponent = f.bits & exponent_mask;
    
    if (mantissa == 0 && exponent == 0)
        return copysign(1.0f, val) * FLT_MAX;
    
    if (exponent == exponent_mask)
    {
        if (mantissa == 0)
        {
            if (sign != 0)
                return (double)NAN;

            return 0.0;
        }

        return 0.0 + val;
    }

    if (sign != 0) 
        return (double)NAN;
    
    if (exponent == 0)
    {
        while ((mantissa & mantissa_mask) == 0)
        {
            exponent -= mantissa_mask;
            mantissa <<= 1ULL;
        }

        mantissa &= denormal_mask - 1ULL;
        exponent += denormal_mask;
    }
    
    uint64_t odd_exponent = (exponent & mantissa_mask) == 0;
    exponent = ((0x3FFULL << 52ULL) - ((exponent - (0x3FEULL << 52ULL)) / 2ULL)) & exponent_mask;
    f.bits   = sign | exponent;
    
    uint64_t i   = mantissa >> 37ULL;
    uint64_t idx = i / 2048ULL;
    if (odd_exponent)
        idx += 16ULL;
    
    f.bits |= (frsqrte_bases[idx] - frsqrte_decs[idx] * (i % 2048ULL)) << 26ULL;
    return f.val;
}

double double_25_bit_mantissa(double val)
{
    double_bits_t f = { .val = val };
    f.bits = (f.bits & 0xfffffffff8000000ULL) + (f.bits & 0x8000000ULL);
    return f.val;
}

float wii_sqrtf(float x)
{
    if (x <= 0.0f)
        return 0.0f;

    double recip_sqrt = ppc_frsqrte((double)x);
    float  tmp0 = (float)(recip_sqrt * double_25_bit_mantissa(recip_sqrt));
    float  tmp1 = (float)(recip_sqrt * 0.5);
    float  tmp2 = (float)(3.0 - ((double)tmp0 * (double)x));
    return tmp1 * tmp2 * x;
}

float wii_sinf(float x)
{
    float step = 256.0f / (2.0f * M_PI_F);
    return wii_sinf_inner(x * step);
}

float wii_sinf_inner(float x)
{
    float f_idx = fabsf(x);
    while (f_idx > 65536.0f)
        f_idx -= 65536.0f;
    
    uint64_t idx = (uint64_t)f_idx % 256ULL;
    return copysignf(1.0f, x) * (trig_table[idx][0] + fracf(f_idx) * trig_table[idx][2]);
}

float wii_cosf(float x)
{
    float step = 256.0f / (2.0f * M_PI_F);
    return wii_cosf_inner(x * step);
}

float wii_cosf_inner(float x)
{
    float f_idx = fabsf(x);
    while (f_idx > 65536.0f)
        f_idx -= 65536.0f;
    
    uint64_t idx = (uint64_t)f_idx % 256ULL;
    return trig_table[idx][1] + fracf(f_idx) * trig_table[idx][3];
}

float wii_atan2f(float y, float x)
{
    if (x == 0.0f && y == 0.0f)
        return 0.0f;
  
    typedef struct
    {
        float a;
        float b;
        float c;
        float d;
    } abcd;
    abcd o;

    if (x < 0.0f)
    {
        if (y < 0.0f)
        {
            if (-x < -y)
                o = (abcd){-y, -x, -64.0f, -1.0f};
            else
                o = (abcd){-x, -y, -128.0f, 1.0f};
        } 
        else 
        {
            if (-x < y)
                o = (abcd){y, -x, 64.0f, 1.0f};
            else 
                o = (abcd){-x, y, 128.0f, -1.0f};
        }
    } 
    else 
    {
        if (y < 0.0f)
        {
            if (x < -y)
                o = (abcd){-y, x, -64.0f, 1.0f};
            else 
                o = (abcd){x, -y, 0.0f, -1.0f};
        } 
        else 
        {
            if (x < y)
                o = (abcd){y, x, 64.0f, -1.0f};
            else
                o = (abcd){x, y, 0.0f, 1.0f};
        }
    }
    
    float    f_idx = o.b / o.a * 32.0f;
    uint64_t idx   = (uint64_t)f_idx % 32ULL;
    float    z     = 0.024543693f * (o.c + o.d * (atan2_bases[idx] + fracf(f_idx) * atan2_incs[idx]));
    return   z;
}